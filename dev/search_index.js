var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PatternFolds","category":"page"},{"location":"#PatternFolds","page":"Home","title":"PatternFolds","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PatternFolds]","category":"page"},{"location":"#PatternFolds.PatternFold","page":"Home","title":"PatternFolds.PatternFold","text":"PatternFold{T, P}\n\nAn abstract stype used as an interface for folded patterns such as VectorFold. To implement the interface and inherit from it, a new structure must define three fields:\n\npattern::P. Note that both length(::P) and rand(:P) methods must be available\ngap::T\nfolds::int\n\n\n\n\n\n","category":"type"},{"location":"#PatternFolds.VectorFold","page":"Home","title":"PatternFolds.VectorFold","text":"VectorFold{T,V <: AbstractVector{T}}\n\nA folded vector structure that extends the methods of AbstractVector to a folded structure.\n\n\n\n\n\n","category":"type"},{"location":"#Base.length-Tuple{Any}","page":"Home","title":"Base.length","text":"length(pf<:PatternFold)\n\nReturn the length of pf if unfolded.\n\n\n\n\n\n","category":"method"},{"location":"#Base.rand-Tuple{PF} where PF<:PatternFold","page":"Home","title":"Base.rand","text":"rand(pf<:PatternFold)\n\nReturns a random value of pf as if it was unfolded.\n\n\n\n\n\n","category":"method"},{"location":"#PatternFolds.folds-Tuple{Any}","page":"Home","title":"PatternFolds.folds","text":"folds(<:PatternFold)\n\nReturn the number of folds. An infinite folded pattern returns 0.\n\n\n\n\n\n","category":"method"},{"location":"#PatternFolds.gap-Tuple{Any}","page":"Home","title":"PatternFolds.gap","text":"gap(<:PatternFold)\n\nReturn the gap between the starts of consecutive folds.\n\n\n\n\n\n","category":"method"},{"location":"#PatternFolds.pattern-Tuple{Any,Any}","page":"Home","title":"PatternFolds.pattern","text":"pattern(vf, index)\n\nReturn the element at index in the original pattern.\n\n\n\n\n\n","category":"method"},{"location":"#PatternFolds.pattern-Tuple{Any}","page":"Home","title":"PatternFolds.pattern","text":"pattern(<:PatternFold)\n\nReturn the pattern of any PatternFold. The pattern defines the occurences of the first fold.\n\n\n\n\n\n","category":"method"},{"location":"#PatternFolds.pattern_length-Tuple{Any}","page":"Home","title":"PatternFolds.pattern_length","text":"pattern_length(pf<:PatternFold)\n\nReturn the length of the basic pattern of pf.\n\n\n\n\n\n","category":"method"},{"location":"#PatternFolds.unfold-Tuple{VectorFold}","page":"Home","title":"PatternFolds.unfold","text":"unfold(vf::VectorFold; from=1, to=folds(vf))\n\nConstruct the unfolded version of vf (with the same type as pattern(vf)) based. Please note that using an iterator on vf avoid memory allocation, which is not the case of unfold.\n\n\n\n\n\n","category":"method"}]
}
